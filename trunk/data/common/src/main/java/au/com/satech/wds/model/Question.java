package au.com.satech.wds.model;
// Generated 27/04/2011 2:03:13 AM by Hibernate Tools 3.2.1.GA

import au.com.satech.wds.model.constant.QuestionConstant;
import java.util.*;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.Store;

/**
 * Question generated by hbm2java
 */
@Entity
@Indexed
@Table(name = "question")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class Question extends BaseObject {

    private Integer questionid;
    private String questiontitle;
    private Integer questiontype;
    private boolean allowdescription;
    private boolean allowmultipile;
    private boolean allowcustomized;
    private boolean wysiwyg;
    private Integer answertype;
    private String answermask;
    private Double rating;
    private Integer columntype;
    private boolean inuse;
    private Integer answered = 0; // -1:skip; 0:is not answered; 1:is answered
    private boolean answering = false;
    private boolean occupy;
    private String lockUser;
    private Set<Answer> answers = new HashSet<Answer>();
    private List<Answer> answersList = new ArrayList<Answer>(); // This list is a transient variable to be used in view
    private Set<Subquestion> subquestions = new HashSet<Subquestion>();
    private List<Subquestion> subquestionsList = new ArrayList<Subquestion>(); // This list is a transient variable to be used in view
    private Set<Columnchoice> columnchoices = new HashSet<Columnchoice>();
    private List<Columnchoice> columnchoicesList = new ArrayList<Columnchoice>(); // This list is a transient variable to be used in view
    private List<String> seletecdAnswerList = new ArrayList<String>();
    private String description;
    private Date createDate;
    private Date modifiedDate;

    public Question() {
    }

    public Question(String questiontitle, Integer questiontype) {
        this.questiontitle = questiontitle;
        this.questiontype = questiontype;
    }

    // -----------------------------------------
    // Set defaults values
    // -----------------------------------------
    /**
     * Set the default values.
     */
    public void initDefaultValues() {
        setQuestiontitle(QuestionConstant.DEFAULTBODYTEXT);
        setQuestiontype(1);
        setAllowdescription(false);
        setAllowmultipile(false);
        setAllowcustomized(false);
        setRating(5.0);
        setAnswertype(1);
        setColumntype(1);
        // init child new list
        setAnswersList(new ArrayList<Answer>());
        setSubquestionsList(new ArrayList<Subquestion>());
        setColumnchoicesList(new ArrayList<Columnchoice>());
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "questionid", unique = true, nullable = false)
    public Integer getQuestionid() {
        return this.questionid;
    }

    public void setQuestionid(Integer questionid) {
        this.questionid = questionid;
    }

    @Column(name = "questiontitle", nullable = false, length = 600)
    @Field(index = Index.TOKENIZED, store = Store.NO)
    public String getQuestiontitle() {
        return this.questiontitle;
    }

    public void setQuestiontitle(String questiontitle) {
        this.questiontitle = questiontitle;
    }

    @Column(name = "questiontype", nullable = false, length = 10)
    public Integer getQuestiontype() {
        return this.questiontype;
    }

    @Transient
    public String getQuestionTypeByName() {
        switch (this.questiontype) {
            case 1:
                return QuestionConstant.FREETEXT;
            case 2:
                return QuestionConstant.RATING;
            case 3:
                return QuestionConstant.CHOICE;
            case 4:
                return QuestionConstant.MATRIX;
            default:
                return "";
        }
    }

    public void setQuestiontype(Integer questiontype) {
        this.questiontype = questiontype;
    }

    @Column(name = "allowdescription")
    public boolean getAllowdescription() {
        return this.allowdescription;
    }

    public void setAllowdescription(boolean allowdescription) {
        this.allowdescription = allowdescription;
    }

    @Column(name = "allowmultipile")
    public boolean getAllowmultipile() {
        return this.allowmultipile;
    }

    public void setAllowmultipile(boolean allowmultipile) {
        this.allowmultipile = allowmultipile;
    }

    @Column(name = "allowcustomized")
    public boolean getAllowcustomized() {
        return this.allowcustomized;
    }

    public void setAllowcustomized(boolean allowcustomized) {
        this.allowcustomized = allowcustomized;
    }

    @Column(name = "wysiwyg")
    public boolean getWysiwyg() {
        return this.wysiwyg;
    }

    public void setWysiwyg(boolean wysiwyg) {
        this.wysiwyg = wysiwyg;
    }

    @OneToMany(cascade = CascadeType.ALL)
    @JoinTable(
            name = "question_subquestion",
    joinColumns = {
        @JoinColumn(name = "questionid")},
    inverseJoinColumns =
    @JoinColumn(name = "subquestionid"))
    public Set<Subquestion> getSubquestions() {
        return this.subquestions;
    }

    public void setSubquestions(Set<Subquestion> subquestions) {
        this.subquestions = subquestions;
    }

    @OneToMany(cascade = CascadeType.ALL)
    @JoinTable(
            name = "question_columnchoice",
    joinColumns = {
        @JoinColumn(name = "questionid")},
    inverseJoinColumns =
    @JoinColumn(name = "columnchoiceid"))
    public Set<Columnchoice> getColumnchoices() {
        return this.columnchoices;
    }

    public void setColumnchoices(Set<Columnchoice> columnchoices) {
        this.columnchoices = columnchoices;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(
            name = "question_answer",
    joinColumns = {
        @JoinColumn(name = "questionid")},
    inverseJoinColumns =
    @JoinColumn(name = "answerid"))
    public Set<Answer> getAnswers() {
        return this.answers;
    }

    public void setAnswers(Set<Answer> answers) {
        this.answers = answers;
    }

    @Override
    public String toString() {
        ToStringBuilder sb = new ToStringBuilder(this, ToStringStyle.DEFAULT_STYLE)
                .append("question id", this.questionid)
                .append("question title", this.questiontitle)
                .append("question type", this.questiontype)
                .append("question description",this.description);
        return sb.toString();
    }

    // The first time equals or hashCode is called,
    // we check if the primary key is present or not.
    // If yes: we use it in equals/hashCode
    // If no: we use a VMID during the entire life of this
    // instance even if later on this instance is assigned
    // a primary key.
    @Override
    public boolean equals(Object question) {
        if (this == question) {
            return true;
        }

        if (!(question instanceof Question)) {
            return false;
        }

        Question other = (Question) question;
        return !(questionid != null ? !(other.getQuestionid() == questionid) : other.getQuestionid() != null);
    }

    @Override
    public int hashCode() {
        return (questionid != null ? questionid.hashCode() : 0);
    }

    /**
     * @return the answertype
     */
    @Column(name = "answertype", length = 10)
    public Integer getAnswertype() {
        return answertype;
    }

    /**
     * @param answertype the answertype to set
     */
    public void setAnswertype(Integer answertype) {
        this.answertype = answertype;
    }

    @Transient
    public String getAnswertypeByName() {
        switch (this.answertype) {
            case 1:
                return QuestionConstant.INPUT;
            case 2:
                return QuestionConstant.TEXTAREA;
            case 3:
                return QuestionConstant.TEXTAREARICH;
            default:
                return "";
        }
    }

    /**
     * @return the answermask
     */
    @Column(name = "answermask", length = 100)
    public String getAnswermask() {
        return answermask;
    }

    /**
     * @param answermask the answermask to set
     */
    public void setAnswermask(String answermask) {
        this.answermask = answermask;
    }

    /**
     * @return the rating
     */
    @Column(name = "rating", length = 20)
    public Double getRating() {
        return rating;
    }

    /**
     * @param rating the rating to set
     */
    public void setRating(Double rating) {
        this.rating = rating;
    }

    /**
     * @return the columntype
     */
    @Column(name = "columntype", length = 10, nullable = true)
    public Integer getColumntype() {
        return columntype;
    }

    @Transient
    public String getColumnTypeByName() {
        switch (this.columntype) {
            case 1:
                return QuestionConstant.INPUT;
            case 2:
                return QuestionConstant.RATING;
            case 3:
                return QuestionConstant.CHOICE;
            default:
                return "";
        }
    }

    /**
     * @param columnchoicetype the columnchoicetype to set
     */
    public void setColumntype(Integer columntype) {
        this.columntype = columntype;
    }

    /**
     * @return the inuse
     */
    public boolean isInuse() {
        return inuse;
    }

    /**
     * @param inuse the inuse to set
     */
    public void setInuse(boolean inuse) {
        this.inuse = inuse;
    }

    /**
     * @return the answersList
     */
    @Transient
    public List<Answer> getAnswersList() {
        return answersList;
    }

    /**
     * @param answersList the answersList to set
     */
    public void setAnswersList(List<Answer> answersList) {
        this.answersList = answersList;
    }

    /**
     * @return the subquestionsList
     */
    @Transient
    public List<Subquestion> getSubquestionsList() {
        return subquestionsList;
    }

    /**
     * @param subquestionsList the subquestionsList to set
     */
    public void setSubquestionsList(List<Subquestion> subquestionsList) {
        this.subquestionsList = subquestionsList;
    }

    @Transient
    public List<String> getSeletecdAnswerList() {
        return seletecdAnswerList;
    }

    public void setSeletecdAnswerList(List<String> seletecdAnswerList) {
        this.seletecdAnswerList = seletecdAnswerList;
    }

    /**
     * @return the columnchoicesList
     */
    @Transient
    public List<Columnchoice> getColumnchoicesList() {
        return columnchoicesList;
    }

    /**
     * @param columnchoicesList the columnchoicesList to set
     */
    public void setColumnchoicesList(List<Columnchoice> columnchoicesList) {
        this.columnchoicesList = columnchoicesList;
    }

    /**
     * @return the answered
     */
    @Transient
    public Integer getAnswered() {
        return answered;
    }

    /**
     * @param answered the answered to set
     */
    public void setAnswered(Integer answered) {
        this.answered = answered;
    }

    /**
     * @return the answering
     */
    @Transient
    public boolean isAnswering() {
        return answering;
    }

    /**
     * @param answering the answering to set
     */
    public void setAnswering(boolean answering) {
        this.answering = answering;
    }


    @Column(name = "lockuser", nullable = true)
    public String getLockUser() {
        return lockUser;
    }

    public void setLockUser(String lockUser) {
        this.lockUser = lockUser;
    }
    @Column(name = "occupy")
    public boolean isOccupy() {
        return occupy;
    }

    public void setOccupy(boolean occupy) {
        this.occupy = occupy;
    }

    @Column(name="description",columnDefinition="TEXT")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="createDate")
    public Date getCreateDate() {
        return createDate;
    }

    public void setCreateDate(Date createDate) {
        this.createDate = createDate;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="modifiedDate")
    public Date getModifiedDate() {
        return modifiedDate;
    }

    public void setModifiedDate(Date modifiedDate) {
        this.modifiedDate = modifiedDate;
    }
    
    
}
